using System;

using Rhino.Commands;

namespace RhinoCodePlatform.Rhino3D.Projects.Plugin
{
  [CommandStyle(Rhino.Commands.Style.ScriptRunner)]
  public class ProjectCommand_Python_LBT_Sunpath  : Command
  {
    Rhino.Runtime.PythonScript _script;
    Rhino.Runtime.PythonCompiledCode _compiledCode;

    public Guid CommandId { get; } = new Guid("0566725e-a8ae-4419-8d94-4d0c6910c256");

    public override string EnglishName => "LBT_Sunpath";

    protected override Rhino.Commands.Result RunCommand(Rhino.RhinoDoc doc, Rhino.Commands.RunMode mode)
    {
      if (_compiledCode is null)
      {
        ProjectLibs.InitPythonLibraries();

        _script = Rhino.Runtime.PythonScript.Create();
        _compiledCode = _script.Compile(
            ProjectPlugin.DecryptString("")
          );
      }

      if (_compiledCode is null)
      {
        Rhino.RhinoApp.WriteLine("The script code for {0} could not be retrieved or compiled.", EnglishName);
        return Rhino.Commands.Result.Failure;
      }

      _script.ScriptContextDoc = doc;
      _script.SetVariable("__name__", "__main__");

      _compiledCode.Execute(_script);

      return Rhino.Commands.Result.Success;
    }
  }
}
