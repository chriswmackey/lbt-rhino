using System;

using Rhino.Commands;

namespace RhinoCodePlatform.Rhino3D.Projects.Plugin
{
  [CommandStyle(Rhino.Commands.Style.ScriptRunner)]
  public class ProjectCommand_Python_LBT_DirectSun  : Command
  {
    Rhino.Runtime.PythonScript _script;
    Rhino.Runtime.PythonCompiledCode _compiledCode;

    public Guid CommandId { get; } = new Guid("5853c1ed-e530-4544-a65a-8cc5e4da8976");

    public override string EnglishName => "LBT_DirectSun";

    protected override Rhino.Commands.Result RunCommand(Rhino.RhinoDoc doc, Rhino.Commands.RunMode mode)
    {
      if (_compiledCode is null)
      {
        ProjectLibs.InitPythonLibraries();

        _script = Rhino.Runtime.PythonScript.Create();
        _compiledCode = _script.Compile(
            ProjectPlugin.DecryptString("IyEgcHl0aG9uIDINCmltcG9ydCBvcw0KaW1wb3J0IG1hdGgNCg0KdHJ5Og0KICAgIGZyb20gbGFkeWJ1Z19nZW9tZXRyeS5nZW9tZXRyeTJkIGltcG9ydCBQb2ludDJEDQogICAgZnJvbSBsYWR5YnVnX2dlb21ldHJ5Lmdlb21ldHJ5M2QgaW1wb3J0IFBvaW50M0QsIFZlY3RvcjNEDQpleGNlcHQgSW1wb3J0RXJyb3IgYXMgZToNCiAgICByYWlzZSBJbXBvcnRFcnJvcignXG5GYWlsZWQgdG8gaW1wb3J0IGxhZHlidWdfZ2VvbWV0cnk6XG5cdHt9Jy5mb3JtYXQoZSkpDQoNCnRyeToNCiAgICBmcm9tIGxhZHlidWcuZnV0aWwgaW1wb3J0IHVuemlwX2ZpbGUNCiAgICBmcm9tIGxhZHlidWcuY29uZmlnIGltcG9ydCBmb2xkZXJzDQogICAgZnJvbSBsYWR5YnVnLmR0IGltcG9ydCBEYXRlVGltZQ0KICAgIGZyb20gbGFkeWJ1Zy5jb2xvciBpbXBvcnQgQ29sb3JzZXQNCiAgICBmcm9tIGxhZHlidWcubGVnZW5kIGltcG9ydCBMZWdlbmRQYXJhbWV0ZXJzDQogICAgZnJvbSBsYWR5YnVnLmVwdyBpbXBvcnQgRVBXDQogICAgZnJvbSBsYWR5YnVnLnN1bnBhdGggaW1wb3J0IFN1bnBhdGgNCiAgICBmcm9tIGxhZHlidWcuZGF0YXR5cGUudGltZSBpbXBvcnQgVGltZQ0KZXhjZXB0IEltcG9ydEVycm9yIGFzIGU6DQogICAgcmFpc2UgSW1wb3J0RXJyb3IoJ1xuRmFpbGVkIHRvIGltcG9ydCBsYWR5YnVnOlxuXHR7fScuZm9ybWF0KGUpKQ0KDQp0cnk6DQogICAgZnJvbSBsYWR5YnVnX2Rpc3BsYXkudmlzdWFsaXphdGlvbiBpbXBvcnQgVmlzdWFsaXphdGlvblNldCwgQW5hbHlzaXNHZW9tZXRyeSwgXA0KICAgICAgICBWaXN1YWxpemF0aW9uRGF0YSwgQ29udGV4dEdlb21ldHJ5DQpleGNlcHQgSW1wb3J0RXJyb3IgYXMgZToNCiAgICByYWlzZSBJbXBvcnRFcnJvcignXG5GYWlsZWQgdG8gaW1wb3J0IGxhZHlidWdfZ2VvbWV0cnk6XG5cdHt9Jy5mb3JtYXQoZSkpDQoNCnRyeToNCiAgICBmcm9tIGxhZHlidWdfcmhpbm8uZG93bmxvYWQgaW1wb3J0IGRvd25sb2FkX2ZpbGUNCiAgICBmcm9tIGxhZHlidWdfcmhpbm8uY29uZmlnIGltcG9ydCBjb252ZXJzaW9uX3RvX21ldGVycywgcmhpbm9fdmVyc2lvbg0KICAgIGZyb20gbGFkeWJ1Z19yaGluby50b2dlb21ldHJ5IGltcG9ydCB0b19qb2luZWRfZ3JpZGRlZF9tZXNoM2QsIHRvX3ZlY3RvcjNkDQogICAgZnJvbSBsYWR5YnVnX3JoaW5vLmZyb21nZW9tZXRyeSBpbXBvcnQgZnJvbV9wb2ludDNkLCBmcm9tX3ZlY3RvcjNkDQogICAgZnJvbSBsYWR5YnVnX3JoaW5vLmludGVyc2VjdCBpbXBvcnQgam9pbl9nZW9tZXRyeV90b19tZXNoLCBpbnRlcnNlY3RfbWVzaF9yYXlzDQogICAgZnJvbSBsYWR5YnVnX3JoaW5vLnByZXZpZXcgaW1wb3J0IFZpc3VhbGl6YXRpb25TZXRDb25kdWl0DQogICAgZnJvbSBsYWR5YnVnX3JoaW5vLmJha2VvYmplY3RzIGltcG9ydCBiYWtlX3Zpc3VhbGl6YXRpb25fc2V0DQpleGNlcHQgSW1wb3J0RXJyb3IgYXMgZToNCiAgICByYWlzZSBJbXBvcnRFcnJvcignXG5GYWlsZWQgdG8gaW1wb3J0IGxhZHlidWdfcmhpbm86XG5cdHt9Jy5mb3JtYXQoZSkpDQoNCmltcG9ydCBSaGlubw0KaW1wb3J0IHNjcmlwdGNvbnRleHQgYXMgc2MNCg0KDQpmcm9tIFN5c3RlbSBpbXBvcnQgRW52aXJvbm1lbnQNCg0KZGVmIGxvY2FsX3Byb2Nlc3Nvcl9jb3VudCgpOg0KICAgICIiIkdldCBhbiBpbnRlZ2VyIGZvciB0aGUgbnVtYmVyIG9mIHByb2Nlc3NvcnMgb24gdGhpcyBtYWNoaW5lLg0KDQogICAgSWYsIGZvciB3aGF0ZXZlciByZWFzb24sIHRoZSBudW1iZXIgb2YgcHJvY2Vzc29ycyBjb3VsZCBub3QgYmUgc2Vuc2VkLA0KICAgIE5vbmUgd2lsbCBiZSByZXR1cm5lZC4NCiAgICAiIiINCiAgICByZXR1cm4gRW52aXJvbm1lbnQuUHJvY2Vzc29yQ291bnQNCg0KDQpkZWYgcmVjb21tZW5kZWRfcHJvY2Vzc29yX2NvdW50KCk6DQogICAgIiIiR2V0IGFuIGludGVnZXIgZm9yIHRoZSByZWNvbW1lbmRlZCBudW1iZXIgb2YgcHJvY2Vzc29ycyBmb3IgcGFyYWxsZWwgY2FsY3VsYXRpb24uDQoNCiAgICBUaGlzIHNob3VsZCBiZSBvbmUgbGVzcyB0aGFuIHRoZSBudW1iZXIgb2YgcHJvY2Vzc29ycyBhdmFpbGFibGUgb24gdGhpcyBtYWNoaW5lDQogICAgdW5sZXNzIHRoZSBtYWNoaW5lIGhhcyBvbmx5IG9uZSBwcm9jZXNzb3IsIGluIHdoaWNoIGNhc2UgMSB3aWxsIGJlIHJldHVybmVkLg0KICAgIElmLCBmb3Igd2hhdGV2ZXIgcmVhc29uLCB0aGUgbnVtYmVyIG9mIHByb2Nlc3NvcnMgY291bGQgbm90IGJlIHNlbnNlZCwgYSB2YWx1ZQ0KICAgIG9mIDEgd2lsbCBiZSByZXR1cm5lZC4NCiAgICAiIiINCiAgICBjcHVfY291bnQgPSBsb2NhbF9wcm9jZXNzb3JfY291bnQoKQ0KICAgIHJldHVybiAxIGlmIGNwdV9jb3VudCBpcyBOb25lIG9yIGNwdV9jb3VudCA8PSAxIGVsc2UgY3B1X2NvdW50IC0gMQ0KDQoNCmRlZiBydW5fZGlyZWN0X3N1bl9jb21tYW5kKCk6DQogICAgIyBnZXQgdGhlIEVQVyBmcm9tIGNvbW1hbmQgbGluZQ0KICAgIGdlcHcgPSBSaGluby5JbnB1dC5DdXN0b20uR2V0U3RyaW5nKCkNCiAgICBnZXB3LlNldENvbW1hbmRQcm9tcHQoJ1NlbGVjdCBhbiBFUFcgZmlsZSBwYXRoIG9yIFVSTCcpDQogICAgZXB3X3BhdGggPSBOb25lDQogICAgaWYgJ2xidF9lcHcnIGluIHNjLnN0aWNreToNCiAgICAgICAgZXB3X3BhdGggPSBzYy5zdGlja3lbJ2xidF9lcHcnXQ0KICAgICAgICBnZXB3LlNldERlZmF1bHRTdHJpbmcoZXB3X3BhdGgpDQoNCiAgICAjIGFkZCBhbGwgb2YgdGhlIG9wdGlvbnMgdG8gdGhlIGNvbW1hbmQNCiAgICBtb250aF9pXyA9IHNjLnN0aWNreVsnbGJ0X3N1bnBhdGhfbW9udGgnXSBpZiAnbGJ0X3N1bnBhdGhfbW9udGgnIGluIHNjLnN0aWNreSBlbHNlIDEyDQogICAgYXZhaWxfbW9udGhzID0gKCdBbGwnLCAnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLA0KICAgICAgICAgICAgICAgICAgICAnSnVsJywgJ0F1ZycsICdTZXAnLCAnT2N0JywgJ05vdicsICdEZWMnKQ0KICAgIG1vbnRoX2xpc3QgPSBnZXB3LkFkZE9wdGlvbkxpc3QoJ01vbnRoJywgYXZhaWxfbW9udGhzLCBtb250aF9pXykNCg0KICAgIGRheV8gPSBzYy5zdGlja3lbJ2xidF9zdW5wYXRoX2RheSddIGlmICdsYnRfc3VucGF0aF9kYXknIGluIHNjLnN0aWNreSBlbHNlIDIxDQogICAgZGF5X29wdGlvbiA9IFJoaW5vLklucHV0LkN1c3RvbS5PcHRpb25JbnRlZ2VyKGRheV8sIDAsIDMxKQ0KICAgIGdlcHcuQWRkT3B0aW9uSW50ZWdlcignRGF5JywgZGF5X29wdGlvbikNCg0KICAgIGhvdXJfID0gIHNjLnN0aWNreVsnbGJ0X3N1bnBhdGhfaG91ciddIGlmICdsYnRfc3VucGF0aF9ob3VyJyBpbiBzYy5zdGlja3kgZWxzZSAyNA0KICAgIGhvdXJfb3B0aW9uID0gUmhpbm8uSW5wdXQuQ3VzdG9tLk9wdGlvbkludGVnZXIoaG91cl8sIDAsIDI0KQ0KICAgIGdlcHcuQWRkT3B0aW9uSW50ZWdlcignSG91cicsIGhvdXJfb3B0aW9uKQ0KDQogICAgbm9ydGhfID0gc2Muc3RpY2t5WydsYnRfbm9ydGgnXSBpZiAnbGJ0X25vcnRoJyBpbiBzYy5zdGlja3kgZWxzZSAwDQogICAgbm9ydGhfb3B0aW9uID0gUmhpbm8uSW5wdXQuQ3VzdG9tLk9wdGlvbkRvdWJsZShub3J0aF8sIDAsIDM2MCkNCiAgICBnZXB3LkFkZE9wdGlvbkRvdWJsZSgnTm9ydGgnLCBub3J0aF9vcHRpb24pDQoNCiAgICAjIGdldCB0aGUgd2VhdGhlciBmaWxlIGFuZCBhbGwgb3B0aW9ucw0KICAgIHdoaWxlIFRydWU6DQogICAgICAgICMgVGhpcyB3aWxsIHByb21wdCB0aGUgdXNlciB0byBpbnB1dCBhbiBFUFcgYW5kIHZpc3VhbGl6YXRpb24gb3B0aW9ucw0KICAgICAgICBnZXRfZXB3ID0gZ2Vwdy5HZXQoKQ0KICAgICAgICBpZiBnZXRfZXB3ID09IFJoaW5vLklucHV0LkdldFJlc3VsdC5TdHJpbmc6DQogICAgICAgICAgICBlcHdfcGF0aCA9IGdlcHcuU3RyaW5nUmVzdWx0KCkNCiAgICAgICAgICAgIG5vcnRoXyA9IG5vcnRoX29wdGlvbi5DdXJyZW50VmFsdWUNCiAgICAgICAgICAgIGRheV8gPSBkYXlfb3B0aW9uLkN1cnJlbnRWYWx1ZQ0KICAgICAgICAgICAgaG91cl8gPSBob3VyX29wdGlvbi5DdXJyZW50VmFsdWUNCiAgICAgICAgZWxpZiBnZXRfZXB3ID09IFJoaW5vLklucHV0LkdldFJlc3VsdC5PcHRpb246DQogICAgICAgICAgICBpZiBnZXB3Lk9wdGlvbkluZGV4KCkgPT0gbW9udGhfbGlzdDoNCiAgICAgICAgICAgICAgICBtb250aF9pXyA9IGdlcHcuT3B0aW9uKCkuQ3VycmVudExpc3RPcHRpb25JbmRleA0KICAgICAgICBicmVhaw0KDQogICAgIyBzYXZlIGFsbCBvZiB0aGUgb3B0aW9ucyB0byBzdGlja3kNCiAgICBzYy5zdGlja3lbJ2xidF9zdW5wYXRoX21vbnRoJ10gPSBtb250aF9pXw0KICAgIHNjLnN0aWNreVsnbGJ0X3N1bnBhdGhfZGF5J10gPSBkYXlfDQogICAgc2Muc3RpY2t5WydsYnRfc3VucGF0aF9ob3VyJ10gPSBob3VyXw0KICAgIHNjLnN0aWNreVsnbGJ0X25vcnRoJ10gPSBub3J0aF8NCg0KICAgICMgcHJvY2VzcyB0aGUgRVBXIGZpbGUgcGF0aCBvciBVUkwNCiAgICBpZiBub3QgZXB3X3BhdGg6DQogICAgICAgIHByaW50KCdObyBFUFcgZmlsZSBzZWxlY3RlZC4nKQ0KICAgICAgICByZXR1cm4NCiAgICBfZGVmX2ZvbGRlciA9IGZvbGRlcnMuZGVmYXVsdF9lcHdfZm9sZGVyDQogICAgaWYgZXB3X3BhdGguc3RhcnRzd2l0aCgnaHR0cCcpOiAgIyBkb3dubG9hZCB0aGUgRVBXIGZpbGUNCiAgICAgICAgX3dlYXRoZXJfVVJMID0gZXB3X3BhdGgNCiAgICAgICAgaWYgX3dlYXRoZXJfVVJMLmxvd2VyKCkuZW5kc3dpdGgoJy56aXAnKTogICMgb25lYnVpbGRpbmcgVVJMIHR5cGUNCiAgICAgICAgICAgIF9mb2xkZXJfbmFtZSA9IF93ZWF0aGVyX1VSTC5zcGxpdCgnLycpWy0xXVs6LTRdDQogICAgICAgIGVsc2U6ICAjIGRlcHQgb2YgZW5lcmd5IFVSTCB0eXBlDQogICAgICAgICAgICBfZm9sZGVyX25hbWUgPSBfd2VhdGhlcl9VUkwuc3BsaXQoJy8nKVstMl0NCiAgICAgICAgZXB3X3BhdGggPSBvcy5wYXRoLmpvaW4oX2RlZl9mb2xkZXIsIF9mb2xkZXJfbmFtZSwgX2ZvbGRlcl9uYW1lICsgJy5lcHcnKQ0KICAgICAgICBpZiBub3Qgb3MucGF0aC5pc2ZpbGUoZXB3X3BhdGgpOg0KICAgICAgICAgICAgemlwX2ZpbGVfcGF0aCA9IG9zLnBhdGguam9pbihfZGVmX2ZvbGRlciwgX2ZvbGRlcl9uYW1lLCBfZm9sZGVyX25hbWUgKyAnLnppcCcpDQogICAgICAgICAgICBkb3dubG9hZF9maWxlKF93ZWF0aGVyX1VSTCwgemlwX2ZpbGVfcGF0aCwgVHJ1ZSkNCiAgICAgICAgICAgIHVuemlwX2ZpbGUoemlwX2ZpbGVfcGF0aCkNCiAgICAgICAgc2Muc3RpY2t5WydsYnRfZXB3J10gPSBvcy5wYXRoLmJhc2VuYW1lKGVwd19wYXRoKQ0KICAgIGVsaWYgbm90IG9zLnBhdGguaXNmaWxlKGVwd19wYXRoKToNCiAgICAgICAgcG9zc2libGVfZmlsZSA9IG9zLnBhdGguYmFzZW5hbWUoZXB3X3BhdGgpWzotNF0gXA0KICAgICAgICAgICAgaWYgZXB3X3BhdGgubG93ZXIoKS5lbmRzd2l0aCgnLmVwdycpIGVsc2UgZXB3X3BhdGgNCiAgICAgICAgZXB3X3BhdGggPSBvcy5wYXRoLmpvaW4oX2RlZl9mb2xkZXIsIHBvc3NpYmxlX2ZpbGUsIHBvc3NpYmxlX2ZpbGUgKyAnLmVwdycpDQogICAgICAgIGlmIG5vdCBvcy5wYXRoLmlzZmlsZShlcHdfcGF0aCk6DQogICAgICAgICAgICBwcmludCgnU2VsZWN0ZWQgRVBXIGZpbGUgYXQgZG9lcyBub3QgZXhpc3QgYXQ6IHt9Jy5mb3JtYXQoZXB3X3BhdGgpKQ0KICAgICAgICAgICAgcmV0dXJuDQogICAgICAgIHNjLnN0aWNreVsnbGJ0X2VwdyddID0gcG9zc2libGVfZmlsZSArICcuZXB3Jw0KICAgIGVsc2U6DQogICAgICAgIHNjLnN0aWNreVsnbGJ0X2VwdyddID0gZXB3X3BhdGgNCg0KICAgICMgY29tcHV0ZSB0aGUgc3VuIHZlY3RvcnMgdG8gYmUgdXNlZCBpbiB0aGUgc3R1ZHkNCiAgICBlcHdfb2JqID0gRVBXKGVwd19wYXRoKQ0KICAgIF9sb2NhdGlvbiA9IGVwd19vYmoubG9jYXRpb24NCiAgICBzcCA9IFN1bnBhdGguZnJvbV9sb2NhdGlvbihfbG9jYXRpb24sIG5vcnRoXykNCiAgICBtb250aHMgPSBbbW9udGhfaV9dIGlmIG1vbnRoX2lfICE9IDAgZWxzZSBsaXN0KHJhbmdlKDEsIDEzKSkNCiAgICBkYXlzID0gW2RheV9dIGlmIGRheV8gIT0gMCBlbHNlIGxpc3QocmFuZ2UoMSwgMzIpKQ0KICAgIGhvdXJzID0gW2hvdXJfXSBpZiBob3VyXyAhPSAyNCBlbHNlIGxpc3QocmFuZ2UoMCwgMjQpKQ0KICAgIF92ZWN0b3JzLCBfaG95cyA9IFtdLCBbXQ0KICAgIGZvciBtb250aCBpbiBtb250aHM6DQogICAgICAgIGZvciBkYXkgaW4gZGF5czoNCiAgICAgICAgICAgIGZvciBob3VyIGluIGhvdXJzOg0KICAgICAgICAgICAgICAgIGRhdGVfb2JqID0gRGF0ZVRpbWUobW9udGgsIGRheSwgaG91cikNCiAgICAgICAgICAgICAgICBob3kgPSBkYXRlX29iai5ob3kNCiAgICAgICAgICAgICAgICBzdW4gPSBzcC5jYWxjdWxhdGVfc3VuX2Zyb21faG95KGhveSwgRmFsc2UpDQogICAgICAgICAgICAgICAgaWYgc3VuLmlzX2R1cmluZ19kYXk6DQogICAgICAgICAgICAgICAgICAgIF92ZWN0b3JzLmFwcGVuZChmcm9tX3ZlY3RvcjNkKHN1bi5zdW5fdmVjdG9yKSkNCiAgICAgICAgICAgICAgICAgICAgX2hveXMuYXBwZW5kKGhveSkNCg0KICAgICMgbWFrZSBhIHByZXZpZXcgb2YgdGhlIHN1bnMgb24gdGhlIHN1bnBhdGgNCiAgICBjZW50ZXJfcHQzZCA9IHNjLnN0aWNreVsnbGJ0X29yaWdpbiddIGlmICdsYnRfb3JpZ2luJyBpbiBzYy5zdGlja3kgZWxzZSBQb2ludDNEKCkNCiAgICBzY2FsZV8gPSBzYy5zdGlja3lbJ2xidF9zdW5wYXRoX3NjYWxlJ10gaWYgJ2xidF9zdW5wYXRoX3NjYWxlJyBpbiBzYy5zdGlja3kgZWxzZSAxDQogICAgcmFkaXVzID0gKDEwMCAqIHNjYWxlXykgLyBjb252ZXJzaW9uX3RvX21ldGVycygpDQogICAgdmlzX3NldF9hcmdzID0gW19ob3lzLCBbXSwgTm9uZSwgcmFkaXVzLCBjZW50ZXJfcHQzZF0NCiAgICB2aXNfc2V0ID0gc3AudG9fdmlzX3NldCgqdmlzX3NldF9hcmdzKQ0KICAgIGNvbmR1aXQgPSBWaXN1YWxpemF0aW9uU2V0Q29uZHVpdCh2aXNfc2V0KQ0KICAgIGNvbmR1aXQuRW5hYmxlZCA9IFRydWUNCiAgICBzYy5kb2MuVmlld3MuUmVkcmF3KCkNCg0KICAgICMgZ2V0IHRoZSBhbmFseXNpcyBnZW9tZXRyeSBmcm9tIHRoZSBzY2VuZQ0KICAgIGdlb19maWx0ZXIgPSBSaGluby5Eb2NPYmplY3RzLk9iamVjdFR5cGUuU3VyZmFjZSB8IFJoaW5vLkRvY09iamVjdHMuT2JqZWN0VHlwZS5Qb2x5c3JmRmlsdGVyIHwgXA0KICAgICAgICBSaGluby5Eb2NPYmplY3RzLk9iamVjdFR5cGUuTWVzaA0KICAgIGdvID0gUmhpbm8uSW5wdXQuQ3VzdG9tLkdldE9iamVjdCgpDQogICAgZ28uU2V0Q29tbWFuZFByb21wdCgnU2VsZWN0IHN1cmZhY2VzLCBwb2x5c3VyZmFjZXMsIG9yIG1lc2hlcyBvbiB3aGljaCBEaXJlY3QgU3VuIHdpbGwgYmUgc3R1ZGllZC4nKQ0KICAgIGdvLkdlb21ldHJ5RmlsdGVyID0gZ2VvX2ZpbHRlcg0KDQogICAgIyBhZGQgYWxsIG9mIHRoZSBvcHRpb25zIGZvciB0aGUgZ2VvbWV0cnkNCiAgICBncmlkX3NpemVfID0gc2Muc3RpY2t5WydsYnRfc3R1ZHlfZ3JpZF9zaXplJ10gaWYgJ2xidF9zdHVkeV9ncmlkX3NpemUnIGluIHNjLnN0aWNreSBcDQogICAgICAgIGVsc2UgaW50KDEgLyBjb252ZXJzaW9uX3RvX21ldGVycygpKQ0KICAgIGdzX29wdGlvbiA9IFJoaW5vLklucHV0LkN1c3RvbS5PcHRpb25Eb3VibGUoZ3JpZF9zaXplXywgVHJ1ZSwgMCkNCiAgICBnby5BZGRPcHRpb25Eb3VibGUoJ0dyaWRTaXplJywgZ3Nfb3B0aW9uKQ0KDQogICAgb2Zmc2V0X2Rpc3RfID0gc2Muc3RpY2t5WydsYnRfc3R1ZHlfb2Zmc2V0J10gaWYgJ2xidF9zdHVkeV9vZmZzZXQnIGluIHNjLnN0aWNreSBcDQogICAgICAgIGVsc2Ugcm91bmQoKDAuMSAvIGNvbnZlcnNpb25fdG9fbWV0ZXJzKCkpLCAyKQ0KICAgIG9mZl9vcHRpb24gPSBSaGluby5JbnB1dC5DdXN0b20uT3B0aW9uRG91YmxlKG9mZnNldF9kaXN0XywgVHJ1ZSwgMCkNCiAgICBnby5BZGRPcHRpb25Eb3VibGUoJ09mZnNldCcsIG9mZl9vcHRpb24pDQoNCiAgICAjIGFkZCBtb3JlIGF0dHJpYnV0ZXMgcmVsYXRlZCB0byBzZWxlY3Rpb24NCiAgICBnby5Hcm91cFNlbGVjdCA9IFRydWUNCiAgICBnby5TdWJPYmplY3RTZWxlY3QgPSBGYWxzZQ0KICAgIGdvLkVuYWJsZUNsZWFyT2JqZWN0c09uRW50cnkoRmFsc2UpDQogICAgZ28uRW5hYmxlVW5zZWxlY3RPYmplY3RzT25FeGl0KEZhbHNlKQ0KICAgIGdvLkRlc2VsZWN0QWxsQmVmb3JlUG9zdFNlbGVjdCA9IEZhbHNlDQoNCiAgICAjIGdldCB0aGUgYW5hbHlzaXMgZ2VvbWV0cmllcyBmcm9tIHRoZSBzY2VuZQ0KICAgIGhhdmVfcHJlc2VsZWN0ZWRfb2JqZWN0cyA9IEZhbHNlDQogICAgd2hpbGUgVHJ1ZToNCiAgICAgICAgcmVzID0gZ28uR2V0TXVsdGlwbGUoMSwgMCkNCiAgICAgICAgaWYgcmVzID09IFJoaW5vLklucHV0LkdldFJlc3VsdC5PcHRpb246DQogICAgICAgICAgICBnby5FbmFibGVQcmVTZWxlY3QoRmFsc2UsIFRydWUpDQogICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICBlbGlmIHJlcyAhPSBSaGluby5JbnB1dC5HZXRSZXN1bHQuT2JqZWN0Og0KICAgICAgICAgICAgcmV0dXJuIFJoaW5vLkNvbW1hbmRzLlJlc3VsdC5DYW5jZWwNCiAgICAgICAgaWYgZ28uT2JqZWN0c1dlcmVQcmVzZWxlY3RlZDoNCiAgICAgICAgICAgIGhhdmVfcHJlc2VsZWN0ZWRfb2JqZWN0cyA9IFRydWUNCiAgICAgICAgICAgIGdvLkVuYWJsZVByZVNlbGVjdChGYWxzZSwgVHJ1ZSkNCiAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgIGdyaWRfc2l6ZV8gPSBnc19vcHRpb24uQ3VycmVudFZhbHVlDQogICAgICAgIG9mZnNldF9kaXN0XyA9IG9mZl9vcHRpb24uQ3VycmVudFZhbHVlDQogICAgICAgIGJyZWFrDQogICAgaWYgaGF2ZV9wcmVzZWxlY3RlZF9vYmplY3RzOg0KICAgICAgICBmb3IgaSBpbiByYW5nZSgwLCBnby5PYmplY3RDb3VudCk6DQogICAgICAgICAgICByaGlub19vYmogPSBnby5PYmplY3QoaSkuT2JqZWN0KCkNCiAgICAgICAgICAgIGlmIG5vdCByaGlub19vYmogaXMgTm9uZToNCiAgICAgICAgICAgICAgICByaGlub19vYmouU2VsZWN0KEZhbHNlKQ0KICAgICAgICBzYy5kb2MuVmlld3MuUmVkcmF3KCkNCg0KICAgICMgdHVybiBvZmYgdGhlIHByZXZpZXcgb2YgdGhlIHN1bnBhdGgNCiAgICBjb25kdWl0LkVuYWJsZWQgPSBGYWxzZQ0KICAgIHNjLmRvYy5WaWV3cy5SZWRyYXcoKQ0KDQogICAgIyBnZXQgdGhlIGFjdHVhbCBnZW9tZXRyeSBmcm9tIHRoZSBzZWxlY3Rpb24NCiAgICBvYmpfdGFibGUgPSBSaGluby5SaGlub0RvYy5BY3RpdmVEb2MuT2JqZWN0cw0KICAgIGdlb21ldHJ5XyA9IFtdDQogICAgZm9yIGdldF9vYmogaW4gZ28uT2JqZWN0cygpOg0KICAgICAgICBnZW9tZXRyeV8uYXBwZW5kKG9ial90YWJsZS5GaW5kKGdldF9vYmouT2JqZWN0SWQpLkdlb21ldHJ5KQ0KICAgIGlmIGxlbihnZW9tZXRyeV8pID09IDA6DQogICAgICAgIHJldHVybg0KDQogICAgIyBzYXZlIGFsbCBvZiB0aGUgb3B0aW9ucyB0byBzdGlja3kNCiAgICBzYy5zdGlja3lbJ2xidF9zdHVkeV9ncmlkX3NpemUnXSA9IGdyaWRfc2l6ZV8NCiAgICBzYy5zdGlja3lbJ2xidF9zdHVkeV9vZmZzZXQnXSA9IG9mZnNldF9kaXN0Xw0KDQogICAgIyBjcmVhdGUgdGhlIGdyaWRkZWQgbWVzaCBmcm9tIHRoZSBnZW9tZXRyeQ0KICAgIHN0dWR5X21lc2ggPSB0b19qb2luZWRfZ3JpZGRlZF9tZXNoM2QoZ2VvbWV0cnlfLCBncmlkX3NpemVfKQ0KICAgIGxiX3BvaW50cyA9IFtwdC5tb3ZlKHZlYyAqIG9mZnNldF9kaXN0XykgZm9yIHB0LCB2ZWMgaW4NCiAgICAgICAgICAgICAgICAgemlwKHN0dWR5X21lc2guZmFjZV9jZW50cm9pZHMsIHN0dWR5X21lc2guZmFjZV9ub3JtYWxzKV0NCiAgICBwb2ludHMgPSBbZnJvbV9wb2ludDNkKHB0KSBmb3IgcHQgaW4gbGJfcG9pbnRzXQ0KDQogICAgIyBkaXNwbGF5IHRoZSBhbmFseXNpcyBwb2ludHMgaW4gdGhlIHNjZW5lDQogICAgcG9pbnRzX2NvbnRleHQgPSBDb250ZXh0R2VvbWV0cnkoJ0FuYWx5c2lzX1BvaW50cycsIGxiX3BvaW50cykNCiAgICB2aXNfc2V0ID0gVmlzdWFsaXphdGlvblNldCgnQW5hbHlzaXNfUHJldmlldycsIFtwb2ludHNfY29udGV4dF0pDQogICAgY29uZHVpdCA9IFZpc3VhbGl6YXRpb25TZXRDb25kdWl0KHZpc19zZXQpDQogICAgY29uZHVpdC5FbmFibGVkID0gVHJ1ZQ0KICAgIHNjLmRvYy5WaWV3cy5SZWRyYXcoKQ0KDQogICAgIyBnZXQgYW55IGNvbnRleHQgZ2VvbWV0cnkNCiAgICBnY29uID0gUmhpbm8uSW5wdXQuQ3VzdG9tLkdldE9iamVjdCgpDQogICAgZ2Nvbi5TZXRDb21tYW5kUHJvbXB0KCdTZWxlY3QgY29udGV4dCBzdXJmYWNlcywgcG9seXN1cmZhY2VzLCBvciBtZXNoZXMgb24gd2hpY2ggYmxvY2sgdGhlIHN1bi4nKQ0KICAgIGdjb24uR2VvbWV0cnlGaWx0ZXIgPSBnZW9fZmlsdGVyDQogICAgZ2Nvbi5Hcm91cFNlbGVjdCA9IFRydWUNCiAgICBnY29uLlN1Yk9iamVjdFNlbGVjdCA9IEZhbHNlDQogICAgZ2Nvbi5FbmFibGVDbGVhck9iamVjdHNPbkVudHJ5KEZhbHNlKQ0KICAgIGdjb24uRW5hYmxlVW5zZWxlY3RPYmplY3RzT25FeGl0KEZhbHNlKQ0KICAgIGdjb24uRGVzZWxlY3RBbGxCZWZvcmVQb3N0U2VsZWN0ID0gRmFsc2UNCg0KICAgICMgZ2V0IHRoZSBhbmFseXNpcyBnZW9tZXRyaWVzIGZyb20gdGhlIHNjZW5lDQogICAgaGF2ZV9wcmVzZWxlY3RlZF9vYmplY3RzID0gRmFsc2UNCiAgICB3aGlsZSBUcnVlOg0KICAgICAgICByZXMgPSBnY29uLkdldE11bHRpcGxlKDEsIDApDQogICAgICAgIGlmIHJlcyA9PSBSaGluby5JbnB1dC5HZXRSZXN1bHQuT3B0aW9uOg0KICAgICAgICAgICAgZ2Nvbi5FbmFibGVQcmVTZWxlY3QoRmFsc2UsIFRydWUpDQogICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICBpZiBnY29uLk9iamVjdHNXZXJlUHJlc2VsZWN0ZWQ6DQogICAgICAgICAgICBoYXZlX3ByZXNlbGVjdGVkX29iamVjdHMgPSBUcnVlDQogICAgICAgICAgICBnY29uLkVuYWJsZVByZVNlbGVjdChGYWxzZSwgVHJ1ZSkNCiAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgIGJyZWFrDQogICAgaWYgaGF2ZV9wcmVzZWxlY3RlZF9vYmplY3RzOg0KICAgICAgICBmb3IgaSBpbiByYW5nZSgwLCBnY29uLk9iamVjdENvdW50KToNCiAgICAgICAgICAgIHJoaW5vX29iaiA9IGdjb24uT2JqZWN0KGkpLk9iamVjdCgpDQogICAgICAgICAgICBpZiBub3Qgcmhpbm9fb2JqIGlzIE5vbmU6DQogICAgICAgICAgICAgICAgcmhpbm9fb2JqLlNlbGVjdChGYWxzZSkNCiAgICAgICAgc2MuZG9jLlZpZXdzLlJlZHJhdygpDQogICAgDQogICAgIyBnZXQgdGhlIGFjdHVhbCBnZW9tZXRyeSBmcm9tIHRoZSBzZWxlY3Rpb24NCiAgICBvYmpfdGFibGUgPSBSaGluby5SaGlub0RvYy5BY3RpdmVEb2MuT2JqZWN0cw0KICAgIGNvbnRleHRfID0gW10NCiAgICBmb3IgZ2V0X29iaiBpbiBnY29uLk9iamVjdHMoKToNCiAgICAgICAgY29udGV4dF8uYXBwZW5kKG9ial90YWJsZS5GaW5kKGdldF9vYmouT2JqZWN0SWQpLkdlb21ldHJ5KQ0KDQogICAgIyB0dXJuIG9mZiB0aGUgcHJldmlldyBvZiB0aGUgYW5hbHlzaXMgcG9pbnRzDQogICAgY29uZHVpdC5FbmFibGVkID0gRmFsc2UNCiAgICBzYy5kb2MuVmlld3MuUmVkcmF3KCkNCg0KICAgICMgbWVyZ2UgYWxsIG9mIHRoZSBjb250ZXh0IG1lc2hlcyB0b2dldGhlcg0KICAgIHNoYWRlX21lc2ggPSBqb2luX2dlb21ldHJ5X3RvX21lc2goZ2VvbWV0cnlfICsgY29udGV4dF8pDQoNCiAgICAjIGdldCB0aGUgc3R1ZHkgcG9pbnRzIGFuZCByZXZlcnNlIHRoZSBzdW4gdmVjdG9ycyAoZm9yIGJhY2t3YXJkIHJheS10cmFjdGluZykNCiAgICByZXZfdmVjID0gW2Zyb21fdmVjdG9yM2QodG9fdmVjdG9yM2QodmVjKS5yZXZlcnNlKCkpIGZvciB2ZWMgaW4gX3ZlY3RvcnNdDQogICAgbm9ybWFscyA9IFtmcm9tX3ZlY3RvcjNkKHZlYykgZm9yIHZlYyBpbiBzdHVkeV9tZXNoLmZhY2Vfbm9ybWFsc10NCg0KICAgICMgaW50ZXJzZWN0IHRoZSByYXlzIHdpdGggdGhlIG1lc2gNCiAgICBjcHVfY291bnQgPSByZWNvbW1lbmRlZF9wcm9jZXNzb3JfY291bnQoKSBpZiByaGlub192ZXJzaW9uIDwgKDgsIDApIGVsc2UgMQ0KICAgIGludF9tYXRyaXgsIGFuZ2xlcyA9IGludGVyc2VjdF9tZXNoX3JheXMoDQogICAgICAgIHNoYWRlX21lc2gsIHBvaW50cywgcmV2X3ZlYywgbm9ybWFscywgY3B1X2NvdW50PTEpDQogICAgcmVzdWx0cyA9IFtzdW0oaW50X2xpc3QpIGZvciBpbnRfbGlzdCBpbiBpbnRfbWF0cml4XQ0KDQogICAgIyBjcmVhdGUgYW4gcmVzdWx0IHZpc3VhbGl6YXRpb24gc2V0IGFuZCBkaXNwbGF5IGl0IGluIHRoZSBzY2VuZQ0KICAgIHZpc19zZXQgPSBWaXN1YWxpemF0aW9uU2V0KCdEaXJlY3RTdW5TdHVkeScsICgpKQ0KICAgIHZpc19zZXQuZGlzcGxheV9uYW1lID0gJ0RpcmVjdCBTdW4gU3R1ZHknDQogICAgZF90eXBlLCB1bml0ID0gVGltZSgpLCAnaHInDQoNCiAgICAjIGNyZWF0ZSB0aGUgQW5hbHlzaXNHZW9tZXRyeQ0KICAgIGxfcGFyID0gTGVnZW5kUGFyYW1ldGVycygpDQogICAgbF9wYXIuY29sb3JzID0gQ29sb3JzZXQuZWNvdGVjdCgpDQogICAgdmlzX2RhdGEgPSBWaXN1YWxpemF0aW9uRGF0YShyZXN1bHRzLCBsX3BhciwgZF90eXBlLCB1bml0KQ0KICAgIG1lc2hfZ2VvID0gQW5hbHlzaXNHZW9tZXRyeSgnRGlyZWN0X1N1bl9EYXRhJywgW3N0dWR5X21lc2hdLCBbdmlzX2RhdGFdKQ0KICAgIG1lc2hfZ2VvLmRpc3BsYXlfbmFtZSA9ICdEaXJlY3QgU3VuIERhdGEnDQogICAgbWVzaF9nZW8uZGlzcGxheV9tb2RlID0gJ1N1cmZhY2UnDQogICAgdmlzX3NldC5hZGRfZ2VvbWV0cnkobWVzaF9nZW8pDQoNCiAgICAjIHByZXZpZXcgdGhlIHZpc3VhbGl6YXRpb24gc2V0DQogICAgcmVuZGVyXzJkX2xlZ2VuZCA9IFRydWUgaWYgcmhpbm9fdmVyc2lvbiA8ICg4LCAwKSBlbHNlIEZhbHNlDQogICAgcmVuZGVyXzNkX2xlZ2VuZCA9IEZhbHNlIGlmIHJoaW5vX3ZlcnNpb24gPCAoOCwgMCkgZWxzZSBUcnVlDQogICAgY29uZHVpdCA9IFZpc3VhbGl6YXRpb25TZXRDb25kdWl0KA0KICAgICAgICB2aXNfc2V0LCByZW5kZXJfMmRfbGVnZW5kPXJlbmRlcl8yZF9sZWdlbmQsIHJlbmRlcl8zZF9sZWdlbmQ9cmVuZGVyXzNkX2xlZ2VuZCkNCiAgICBjb25kdWl0LkVuYWJsZWQgPSBUcnVlDQogICAgc2MuZG9jLlZpZXdzLlJlZHJhdygpDQoNCiAgICAjIGZpbmFsbHksIGxldCBwZW9wbGUgZGVjaWRlIHdoYXQgdGhleSB3YW50IHRvIGRvIHdpdGggdGhlIHJlc3VsdA0KICAgIGdyZXMgPSBSaGluby5JbnB1dC5DdXN0b20uR2V0U3RyaW5nKCkNCiAgICBncmVzLlNldENvbW1hbmRQcm9tcHQoJ1dvdWxkIHlvdSBsaWtlIHRvIGFkZCB0aGUgU3R1ZHkgR2VvbWV0cnkgdG8gdGhlIERvY3VtZW50PyBIaXQgRU5URVIgd2hlbiBkb25lLicpDQogICAgZ3Jlcy5TZXREZWZhdWx0U3RyaW5nKCdBZGQ/JykNCiAgICBiYWtlX3Jlc3VsdCA9IEZhbHNlDQogICAgcmVzdWx0X29wdGlvbiA9IFJoaW5vLklucHV0LkN1c3RvbS5PcHRpb25Ub2dnbGUoRmFsc2UsICdObycsICdZZXMnKQ0KICAgIGdyZXMuQWRkT3B0aW9uVG9nZ2xlKCdBZGRUb0RvYycsIHJlc3VsdF9vcHRpb24pDQogICAgd2hpbGUgVHJ1ZToNCiAgICAgICAgIyBUaGlzIHdpbGwgcHJvbXB0IHRoZSB1c2VyIHRvIGlucHV0IGFuIEVQVyBhbmQgdmlzdWFsaXphdGlvbiBvcHRpb25zDQogICAgICAgIGdldF9yZXMgPSBncmVzLkdldCgpDQogICAgICAgIGlmIGdldF9yZXMgPT0gUmhpbm8uSW5wdXQuR2V0UmVzdWx0LlN0cmluZzoNCiAgICAgICAgICAgIGJha2VfcmVzdWx0ID0gcmVzdWx0X29wdGlvbi5DdXJyZW50VmFsdWUNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgIGJyZWFrDQogICAgY29uZHVpdC5FbmFibGVkID0gRmFsc2UNCiAgICBzYy5kb2MuVmlld3MuUmVkcmF3KCkNCg0KICAgICMgYWRkIHRoZSB2aXN1YWxpemF0aW9uIHNldCB0byB0aGUgZG9jdW1lbnQNCiAgICBpZiBiYWtlX3Jlc3VsdDoNCiAgICAgICAgYmFrZV92aXN1YWxpemF0aW9uX3NldCh2aXNfc2V0LCBiYWtlXzNkX2xlZ2VuZD1UcnVlKQ0KDQoNCnJ1bl9kaXJlY3Rfc3VuX2NvbW1hbmQoKQ0K")
          );
      }

      if (_compiledCode is null)
      {
        Rhino.RhinoApp.WriteLine("The script code for {0} could not be retrieved or compiled.", EnglishName);
        return Rhino.Commands.Result.Failure;
      }

      _script.ScriptContextDoc = doc;
      _script.SetVariable("__name__", "__main__");

      _compiledCode.Execute(_script);

      return Rhino.Commands.Result.Success;
    }
  }
}
